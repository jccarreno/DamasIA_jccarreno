# -*- coding: utf-8 -*-
"""Damas_AlfaBeta_jccarreno.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gUAKisr6lEOaL_hylFZpYfjqyKJwtjmA
"""

import copy
#Codigo Desarrollado por Juan Camilo Carreño

class Game(object):
    def result (self,board,jugada, colorJugada):
        raise NotImplementedError
    def terminal_test(self, board,jugador):
        raise NotImplementedError
    def actions(self,board,jugador):
        raise NotImplementedError
    def utility(self, board):
        raise NotImplementedError

def alphabeta(game, depth):
    """
    Función que implementa el algoritmo Alfa-Beta para el juego de Damas Españolas.
    game: instancia del tablero del juego.
    depth: profundidad máxima de búsqueda.
    """
    def max_value(game, alpha, beta, depth):
        """
        Función auxiliar para el jugador MAX.
        """
        if depth == 0 or game.terminal_test(game.tablero):
            return game.utility(game.tablero)

        value = float("-inf")
        for move in game.actions(game.tablero,'n'):
            cpyGame=copy.deepcopy(game)
            game.result(cpyGame.tablero,move,'n')
            value = max(value, min_value(cpyGame, alpha, beta, depth - 1))
            alpha = max(alpha, value)
            if alpha >= beta:
                break
        return value

    def min_value(game, alpha, beta, depth):
        """
        Función auxiliar para el jugador MIN.
        """
        if depth == 0 or game.terminal_test(game.tablero):
            return game.utility(game.tablero)

        value = float("inf")
        for move in game.actions(game.tablero,'b'):
            cpyGame=copy.deepcopy(game)
            game.result(cpyGame.tablero,move,'b')
            value = min(value, max_value(cpyGame, alpha, beta, depth - 1))
            beta = min(beta, value)
            if beta <= alpha:
                break
        return value

    best_move = None
    alpha = float("-inf")
    beta = float("inf")
    for move in game.actions(game.tablero,'n'):
        cpyGame=copy.deepcopy(game)
        game.result(cpyGame.tablero,move,'n')
        if game.utility(cpyGame.tablero)>alpha:
            alpha = game.utility(cpyGame.tablero)
            best_move = move
        value = min_value(cpyGame, alpha, beta, depth - 1)
        if value > alpha:
            alpha = value
            best_move = move

    return best_move

letras = {"A": 0, "B": 1, "C": 2, "D": 3, "E": 4, "F": 5, "G": 6, "H": 7}

class Damas(Game):
    def __init__(self):
        self.tablero = [['-', 'n', '-', 'n', '-', 'n', '-', 'n'],
           ['n', '-', 'n', '-', 'n', '-', 'n', '-'],
           ['-', 'n', '-', 'n', '-', 'n', '-', 'n'],
           ['-', '-', '-', '-', '-', '-', '-', '-'],
           ['-', '-', '-', '-', '-', '-', '-', '-'],
           ['b', '-', 'b', '-', 'b', '-', 'b', '-'],
           ['-', 'b', '-', 'b', '-', 'b', '-', 'b'],
           ['b', '-', 'b', '-', 'b', '-', 'b', '-']]
        self.jugador = 'b'

    def moValido(self, jugada, colorJugador):
        """
        Comprueba si la jugada es valida
        """
        if len(jugada)!=4:
          return False
        if jugada[0].upper() not in letras:
            return False
        elif jugada[2].upper() not in letras:
            return False
        elif int (jugada[1]) > 8 or int (jugada[1]) < 1:
            return False
        elif int (jugada[3]) > 8 or int (jugada[3]) < 1:
            return False
        else:
            movOrigenRow=letras[jugada[0].upper()]
            movOrigenCol=int(jugada[1])-1
            movDestinoRow=letras[jugada[2].upper()]
            movDestinoCol=int(jugada[3])-1

            if self.tablero[movOrigenRow][movOrigenCol] == 0:
                return False

            ficha = self.tablero[movOrigenRow][movOrigenCol]

            if ficha.lower() != colorJugador:
                return False

            if jugada not in self.actions(self.tablero,colorJugador):
              return False

            if (ficha == 'N') or (ficha == 'B'):
                numCasillas = abs (movOrigenCol - movDestinoCol)

                if numCasillas == abs (movOrigenRow - movDestinoRow):

                    for i in range(numCasillas):

                        if movDestinoRow < movOrigenRow:
                            movInterRow = movOrigenRow - (i + 1)

                            if movDestinoCol < movOrigenCol:
                                movInterCol = movOrigenCol - (i + 1)

                            else:
                                movInterCol = movOrigenCol + (i + 1)

                        else:
                            movInterRow = movOrigenRow + (i + 1)

                            if movDestinoCol < movOrigenCol:
                                movInterCol = movOrigenCol - (i + 1)

                            else:
                                movInterCol = movOrigenCol + (i + 1)

                        if ((self.tablero[movInterRow][movInterCol] != '-' and movInterCol != movDestinoCol and movInterRow != movDestinoRow)
                            or (self.tablero[movDestinoRow][movDestinoCol] == colorJugador)):
                            return False

                    return True

                else:
                    return False

            else:
                if ((movDestinoRow == movOrigenRow + 1 and movDestinoCol == movOrigenCol + 1) or
                        (movDestinoRow == movOrigenRow + 1 and movDestinoCol == movOrigenCol - 1) or
                        (movDestinoRow == movOrigenRow - 1 and movDestinoCol == movOrigenCol + 1) or
                        (movDestinoRow == movOrigenRow - 1 and movDestinoCol == movOrigenCol - 1)):

                    fichaDestino = self.tablero[movDestinoRow][movDestinoCol]

                    if fichaDestino == ficha:
                        return False

                    elif (fichaDestino != '-') and (movDestinoCol == 0 or movDestinoCol == 7 or
                        movDestinoRow == 0 or movDestinoRow == 7):
                        return False

                    return True

                else:
                    return False

    def convertirDama(self,coordenadas, ficha, board):
        """
        Convierte la ficha a Reina
        """

        if (coordenadas[0] == '7') and (ficha == 'n'):
            board[int(coordenadas[0])][int(coordenadas[1])] = 'N'
        elif (coordenadas[0] == '0') and (ficha == 'b'):
            board[int(coordenadas[0])][int(coordenadas[1])] = 'B'

    def result (self,board,jugada, colorJugada):
        """
        Mueve la ficha y come solo una ficha
        """
        movOrigenRow=letras[jugada[0].upper()]
        movOrigenCol=int(jugada[1])-1
        movDestinoRow=letras[jugada[2].upper()]
        movDestinoCol=int(jugada[3])-1
        coordenadasFicha = ''

        fichaOrigen = board[movOrigenRow][movOrigenCol]
        fichaDestino = board [movDestinoRow][movDestinoCol]


        if fichaDestino == '-':
            board[movDestinoRow][movDestinoCol] = fichaOrigen
            board[movOrigenRow][movOrigenCol] = '-'
            coordenadasFicha = str(movDestinoRow)+str(movDestinoCol)

        elif fichaDestino.lower() != colorJugada and 0<movDestinoCol<7 and 0<movDestinoRow<7:


            board[movOrigenRow][movOrigenCol] = '-'
            board[movDestinoRow][movDestinoCol] = '-'
            if movDestinoRow < movOrigenRow:
                if movDestinoCol < movOrigenCol:
                    if (movDestinoRow - 1)>=0 and (movDestinoCol - 1)>=0:
                        if board[movDestinoRow - 1][movDestinoCol - 1] == '-':
                            board[movDestinoRow - 1][movDestinoCol - 1] = fichaOrigen
                            coordenadasFicha = str(movDestinoRow - 1) + str(movDestinoCol - 1)
                        else:
                            return False

                else:
                    if (movDestinoRow + 1)<=7 and (movDestinoCol - 1)>=0:
                        if board[movDestinoRow - 1][movDestinoCol + 1] == '-':
                            board[movDestinoRow - 1][movDestinoCol + 1] = fichaOrigen
                            coordenadasFicha = str(movDestinoRow - 1) + str(movDestinoCol + 1)
                        else:
                            return False

            else:
                if movDestinoCol < movOrigenCol:
                    if (movDestinoRow + 1)<=7 and (movDestinoCol - 1)>=0:
                        if board[movDestinoRow + 1][movDestinoCol - 1] == '-':
                            board[movDestinoRow + 1][movDestinoCol - 1] = fichaOrigen
                            coordenadasFicha = str(movDestinoRow + 1) + str(movDestinoCol - 1)
                        else:
                            return False
                    else:
                        return False

                else:
                    if (movDestinoRow + 1)<=7 and (movDestinoCol + 1)<=7:
                        if board[movDestinoRow + 1][movDestinoCol + 1] == '-':
                            board[movDestinoRow + 1][movDestinoCol + 1] = fichaOrigen
                            coordenadasFicha = str(movDestinoRow + 1)+str(movDestinoCol + 1)
                        else:
                            return False
                    else:
                        return False
        else:
            return False
        self.convertirDama(coordenadasFicha, fichaOrigen, board)
        return board

    def terminal_test(self, board):
        """
        Comprueba si ha finalizado la partida
        """
        if (len(self.actions(self.tablero, 'n'))==0 and len(self.actions(self.tablero, 'N'))==0):
            return True
        if (len(self.actions(self.tablero, 'b'))==0 and len(self.actions(self.tablero, 'B'))==0):
            return True
        hayNegras = False
        hayBlancas = False
        for i in board:
            for x in i:
                if x.lower() == 'n':
                    hayNegras = True
                elif x.lower() == 'b':
                    hayBlancas = True

        if hayBlancas and hayNegras:
            return False
        else:
            return True

    def display_board(self):
        board = self.tablero
        print("  ", end="")
        print()
        print(" +" + "---+" * 8)
        for row in letras:
            print(row, end="|")
            for col in range(8):
                piece = board[letras[row]][col]
                if piece is not None:
                    print(f" {piece} |", end="")
                else:
                    print("   |", end="")
            print(f" {row}")
            print(" +" + "---+" * 8)
        print("  ", end="")
        print()

    def actions(self,board,jugador):
        movimientos=[]
        lets=['A','B','C','D','E','F','G','H']
        for row in range(8):
            for col in range(8):
                if jugador=='n':
                    if self.tablero[row][col]=='n':
                        if col>0 and col<7 and row<7:
                            diagonal1=str(lets[row]+str(col+1)+lets[row+1]+str(col-1+1))
                            diagonal2=str(lets[row]+str(col+1)+lets[row+1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'n')!=False):
                                movimientos.append(diagonal1)
                            if(self.result(copy.deepcopy(board),diagonal2,'n')!=False):
                                movimientos.append(diagonal2)
                        elif col==0 and row<7:
                            diagonal2=str(lets[row]+str(col+1)+lets[row+1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal2,'n')!=False):
                                movimientos.append(diagonal2)
                        elif col==7 and row<7:
                            diagonal1=str(lets[row]+str(col+1)+lets[row+1]+str(col-1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'n')!=False):
                                movimientos.append(diagonal1)

                    elif self.tablero[row][col]=='N':
                        if row<7 and row>0 and col<7 and col>0:
                            diagonal1=str(lets[row]+str(col+1)+lets[row+1]+str(col-1+1))
                            diagonal2=str(lets[row]+str(col+1)+lets[row+1]+str(col+1+1))
                            diagonal3=str(lets[row]+str(col+1)+lets[row-1]+str(col-1+1))
                            diagonal4=str(lets[row]+str(col+1)+lets[row-1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'n')):
                                movimientos.append(diagonal1)
                            if(self.result(copy.deepcopy(board),diagonal2,'n')):
                                movimientos.append(diagonal2)
                            if(self.result(copy.deepcopy(board),diagonal3,'n')):
                                movimientos.append(diagonal3)
                            if(self.result(copy.deepcopy(board),diagonal4,'n')):
                                movimientos.append(diagonal4)
                        elif row==7 and col<7 and col>0:
                            diagonal3=str(lets[row]+str(col+1)+lets[row-1]+str(col-1+1))
                            diagonal4=str(lets[row]+str(col+1)+lets[row-1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal3,'n')):
                                movimientos.append(diagonal3)
                            if(self.result(copy.deepcopy(board),diagonal4,'n')):
                                movimientos.append(diagonal4)
                        elif row==0 and col<7 and col>0:
                            diagonal1=str(lets[row]+str(col+1)+lets[row+1]+str(col-1+1))
                            diagonal2=str(lets[row]+str(col+1)+lets[row+1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'n')):
                                movimientos.append(diagonal1)
                            if(self.result(copy.deepcopy(board),diagonal2,'n')):
                                movimientos.append(diagonal2)
                        elif row<7 and row>0 and col==7:
                            diagonal1=str(lets[row]+str(col+1)+lets[row+1]+str(col-1+1))
                            diagonal3=str(lets[row]+str(col+1)+lets[row-1]+str(col-1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'n')):
                                movimientos.append(diagonal1)
                            if(self.result(copy.deepcopy(board),diagonal3,'n')):
                                movimientos.append(diagonal3)
                        elif row<7 and row>0 and col==0:
                            diagonal2=str(lets[row]+str(col+1)+lets[row+1]+str(col+1+1))
                            diagonal4=str(lets[row]+str(col+1)+lets[row-1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal2,'n')):
                                movimientos.append(diagonal2)
                            if(self.result(copy.deepcopy(board),diagonal4,'n')):
                                movimientos.append(diagonal4)
                        elif row==0 and col==0:
                            diagonal2=str(lets[row]+str(col+1)+lets[row+1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal2,'n')):
                                movimientos.append(diagonal2)
                        elif row==7 and col==0:
                            diagonal4=str(lets[row]+str(col+1)+lets[row-1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal4,'n')):
                                movimientos.append(diagonal4)
                        elif row==0 and col==7:
                            diagonal1=str(lets[row]+str(col+1)+lets[row+1]+str(col-1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'n')):
                                movimientos.append(diagonal1)
                        elif row==0 and col==0:
                            diagonal3=str(lets[row]+str(col+1)+lets[row-1]+str(col-1+1))
                            if(self.result(copy.deepcopy(board),diagonal3,'n')):
                                movimientos.append(diagonal3)

                elif jugador=='b':
                    if self.tablero[row][col]=='b':
                        if col>0 and col<7 and row>0:
                            diagonal1=str(lets[row]+str(col+1)+lets[row-1]+str(col-1+1))
                            diagonal2=str(lets[row]+str(col+1)+lets[row-1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'b')):
                                movimientos.append(diagonal1)
                            if(self.result(copy.deepcopy(board),diagonal2,'b')):
                                movimientos.append(diagonal2)
                        elif col==0 and row<7:
                            diagonal2=str(lets[row]+str(col+1)+lets[row-1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal2,'b')):
                                movimientos.append(diagonal2)
                        elif col==7 and row<7:
                            diagonal1=str(lets[row]+str(col+1)+lets[row-1]+str(col-1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'b')):
                                movimientos.append(diagonal1)

                    elif self.tablero[row][col]=='B':
                        if row<7 and row>0 and col<7 and col>0:
                            diagonal1=str(lets[row]+str(col+1)+lets[row+1]+str(col-1+1))
                            diagonal2=str(lets[row]+str(col+1)+lets[row+1]+str(col+1+1))
                            diagonal3=str(lets[row]+str(col+1)+lets[row-1]+str(col-1+1))
                            diagonal4=str(lets[row]+str(col+1)+lets[row-1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'b')):
                                movimientos.append(diagonal1)
                            if(self.result(copy.deepcopy(board),diagonal2,'b')):
                                movimientos.append(diagonal2)
                            if(self.result(copy.deepcopy(board),diagonal3,'b')):
                                movimientos.append(diagonal3)
                            if(self.result(copy.deepcopy(board),diagonal4,'b')):
                                movimientos.append(diagonal4)
                        elif row==7 and col<7 and col>0:
                            diagonal3=str(lets[row]+str(col+1)+lets[row-1]+str(col-1+1))
                            diagonal4=str(lets[row]+str(col+1)+lets[row-1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal3,'b')):
                                movimientos.append(diagonal3)
                            if(self.result(copy.deepcopy(board),diagonal4,'b')):
                                movimientos.append(diagonal4)
                        elif row==0 and col<7 and col>0:
                            diagonal1=str(lets[row]+str(col+1)+lets[row+1]+str(col-1+1))
                            diagonal2=str(lets[row]+str(col+1)+lets[row+1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'b')):
                                movimientos.append(diagonal1)
                            if(self.result(copy.deepcopy(board),diagonal2,'b')):
                                movimientos.append(diagonal2)
                        elif row<7 and row>0 and col==7:
                            diagonal1=str(lets[row]+str(col+1)+lets[row+1]+str(col-1+1))
                            diagonal3=str(lets[row]+str(col+1)+lets[row-1]+str(col-1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'b')):
                                movimientos.append(diagonal1)
                            if(self.result(copy.deepcopy(board),diagonal3,'b')):
                                movimientos.append(diagonal3)
                        elif row<7 and row>0 and col==0:
                            diagonal2=str(lets[row]+str(col+1)+lets[row+1]+str(col+1+1))
                            diagonal4=str(lets[row]+str(col+1)+lets[row-1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal2,'b')):
                                movimientos.append(diagonal2)
                            if(self.result(copy.deepcopy(board),diagonal4,'b')):
                                movimientos.append(diagonal4)
                        elif row==0 and col==0:
                            diagonal2=str(lets[row]+str(col+1)+lets[row+1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal2,'b')):
                                movimientos.append(diagonal2)
                        elif row==7 and col==0:
                            diagonal4=str(lets[row]+str(col+1)+lets[row-1]+str(col+1+1))
                            if(self.result(copy.deepcopy(board),diagonal4,'b')):
                                movimientos.append(diagonal4)
                        elif row==0 and col==7:
                            diagonal1=str(lets[row]+str(col+1)+lets[row+1]+str(col-1+1))
                            if(self.result(copy.deepcopy(board),diagonal1,'b')):
                                movimientos.append(diagonal1)
                        elif row==0 and col==0:
                            diagonal3=str(lets[row]+str(col+1)+lets[row-1]+str(col-1+1))
                            if(self.result(copy.deepcopy(board),diagonal3,'b')):
                                movimientos.append(diagonal3)

        return movimientos

    def utility(self, board):
            pts_negras=0
            pts_blancas=0
            for row in range(8):
                for col in range(8):
                    if board[row][col]=='n':
                        pts_negras+=1
                    elif board[row][col]=='N':
                        pts_negras+=3
                    elif board[row][col]=='b':
                        pts_blancas+=1
                    elif board[row][col]=='B':
                        pts_blancas+=3
            return pts_negras-pts_blancas

    def play(self):
        print('Bienvenidos al juego de las damas')
        print ('\n')
        print("Para jugar debe ingresar la coordenada origen y la coordenada destino de esta forma: A1B2")
        Dificultad=int(input("\nSeleccione la dificultad 1(Dificil) 2(Medio) o 3(Facil): "))
        self.display_board()

        victoria=False

        while not victoria:

            movValido=False
            while not movValido:
                if (self.jugador == 'b'):
                    movimiento = input('Mueven las blancas: ')
                else:
                    movimiento = alphabeta(copy.deepcopy(self),Dificultad)
                    print("\nNegras mueven: ",movimiento)
                    input("Presione enter para continuar...")

                if self.moValido(movimiento, self.jugador):
                    if self.result(self.tablero,movimiento, self.jugador):
                        self.display_board()
                        movValido=True
                        if (self.jugador == 'n'):
                            self.jugador = 'b'
                        else:
                            self.jugador = 'n'

                        if self.terminal_test(self.tablero):
                            if self.jugador == 'n':
                                print( '¡Ganan las Blancas!')
                                victoria=True
                            else:
                                victoria=True
                                print( '¡Ganana las Negras!')
                    else:
                        movValido = False
                        print( 'Movimiento no válido')

                else:
                    movValido = False
                    print( 'Movimiento no válido')

juego=Damas()
juego.play()